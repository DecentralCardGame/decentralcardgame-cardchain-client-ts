// Generated by Ignite ignite.com/cli
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { Channel as typeChannel } from "./types";
import { IdentifiedChannel as typeIdentifiedChannel } from "./types";
import { Counterparty as typeCounterparty } from "./types";
import { Packet as typePacket } from "./types";
import { PacketState as typePacketState } from "./types";
import { PacketId as typePacketId } from "./types";
import { Acknowledgement as typeAcknowledgement } from "./types";
import { PacketSequence as typePacketSequence } from "./types";
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {};
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {
            Channel: getStructure(typeChannel.fromPartial({})),
            IdentifiedChannel: getStructure(typeIdentifiedChannel.fromPartial({})),
            Counterparty: getStructure(typeCounterparty.fromPartial({})),
            Packet: getStructure(typePacket.fromPartial({})),
            PacketState: getStructure(typePacketState.fromPartial({})),
            PacketId: getStructure(typePacketId.fromPartial({})),
            Acknowledgement: getStructure(typeAcknowledgement.fromPartial({})),
            PacketSequence: getStructure(typePacketSequence.fromPartial({})),
        };
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const Module = (test) => {
    return {
        module: {
            IbcCoreChannelV1: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default Module;
